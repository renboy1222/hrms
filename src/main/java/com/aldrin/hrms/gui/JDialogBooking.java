/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.aldrin.hrms.gui;

import com.aldrin.hrms.dao.impl.BillDAOImpl;
import com.aldrin.hrms.dao.impl.BookingDAOImpl;
import com.aldrin.hrms.dao.impl.CustomerDAOImpl;
import com.aldrin.hrms.dao.impl.PaymentDAOImpl;
import com.aldrin.hrms.dao.impl.RoomDAOImpl;
import com.aldrin.hrms.dao.impl.RoomRateDAOImpl;
import com.aldrin.hrms.dao.impl.UserDAOImpl;
import com.aldrin.hrms.gui.panel.JPanelDashboard;
import com.aldrin.hrms.model.Bill;
import com.aldrin.hrms.model.Booking;
import com.aldrin.hrms.model.Customer;
import com.aldrin.hrms.model.Payment;
import com.aldrin.hrms.model.RoomRate;
import com.aldrin.hrms.model.User;
import com.aldrin.hrms.util.GroupableTableHeader;
import com.aldrin.hrms.util.StringToDate;
import com.aldrin.hrms.util.TimestampFormatter;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Java Programming with Aldrin
 */
public class JDialogBooking extends javax.swing.JDialog implements MouseListener {

    /**
     * Creates new form JDialogBooking
     */
    private DecimalFormat df = new DecimalFormat("##,##0.00");
    private JFrameHRMS jFrameHrms;
    private static Float fullPayment = 0.0f;
    private static Float partialPayment = 0.0f;
    private static Float totalPayment = 0.0f;
    private static Boolean pay = false;
    private static Booking booking;
    private static Float amountPay;

    public JDialogBooking(JFrameHRMS jFrameHrms, boolean modal) {
        super(jFrameHrms, modal);
        this.jFrameHrms = jFrameHrms;
        initComponents();
        setTable();
        buttonPaymentAble();
        popUpMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableBooking = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButtonAdBooking = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButtonAdBooking1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButtonAdBooking2 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jButtonPayment1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButtonPayment = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButtonAdBooking3 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldFullPayment = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPartialPayment = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("BOOKING");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTableBooking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableBooking);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel5.setPreferredSize(new java.awt.Dimension(10, 316));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel5, java.awt.BorderLayout.EAST);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 316));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel6, java.awt.BorderLayout.WEST);

        jPanel7.setPreferredSize(new java.awt.Dimension(889, 5));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 928, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel8.setPreferredSize(new java.awt.Dimension(935, 95));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel4.setMinimumSize(new java.awt.Dimension(120, 42));
        jPanel4.setPreferredSize(new java.awt.Dimension(889, 60));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));

        jButtonAdBooking.setText("<html><center>Add <br>Booking</center></html>");
        jButtonAdBooking.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAdBooking.setPreferredSize(new java.awt.Dimension(90, 42));
        jButtonAdBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdBookingActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonAdBooking);

        jLabel4.setPreferredSize(new java.awt.Dimension(30, 10));
        jPanel4.add(jLabel4);

        jButtonAdBooking1.setText("<html><center>Remove<br>Booking</center></html>");
        jButtonAdBooking1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAdBooking1.setPreferredSize(new java.awt.Dimension(90, 42));
        jButtonAdBooking1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdBooking1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonAdBooking1);

        jLabel5.setPreferredSize(new java.awt.Dimension(30, 10));
        jPanel4.add(jLabel5);

        jButtonAdBooking2.setText("<html><center>Edit<br>Booking</center></html>");
        jButtonAdBooking2.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAdBooking2.setPreferredSize(new java.awt.Dimension(90, 42));
        jButtonAdBooking2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdBooking2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonAdBooking2);

        jPanel8.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel10.setPreferredSize(new java.awt.Dimension(400, 60));
        jPanel10.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 5));

        jButtonPayment1.setText("<html><center>New<b> Transaction</center></html>");
        jButtonPayment1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonPayment1.setPreferredSize(new java.awt.Dimension(90, 42));
        jButtonPayment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPayment1ActionPerformed(evt);
            }
        });
        jPanel10.add(jButtonPayment1);

        jLabel7.setPreferredSize(new java.awt.Dimension(30, 10));
        jPanel10.add(jLabel7);

        jButtonPayment.setText("<html><center>Payment</center></html>");
        jButtonPayment.setActionCommand("<html><center><b>Payment</center></html>");
        jButtonPayment.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonPayment.setPreferredSize(new java.awt.Dimension(90, 42));
        jButtonPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPaymentActionPerformed(evt);
            }
        });
        jPanel10.add(jButtonPayment);

        jLabel6.setPreferredSize(new java.awt.Dimension(30, 10));
        jPanel10.add(jLabel6);

        jButtonAdBooking3.setText("<html><center>Print<br>Invoice</center></html>");
        jButtonAdBooking3.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButtonAdBooking3.setPreferredSize(new java.awt.Dimension(90, 42));
        jButtonAdBooking3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAdBooking3ActionPerformed(evt);
            }
        });
        jPanel10.add(jButtonAdBooking3);

        jPanel8.add(jPanel10, java.awt.BorderLayout.EAST);

        jPanel9.setPreferredSize(new java.awt.Dimension(935, 35));
        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("PARTIAL PAYMENT:");
        jPanel9.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 0, 110, 40));

        jTextFieldFullPayment.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextFieldFullPayment.setPreferredSize(new java.awt.Dimension(64, 25));
        jPanel9.add(jTextFieldFullPayment, new org.netbeans.lib.awtextra.AbsoluteConstraints(792, 5, 126, -1));

        jLabel2.setText("FULL PAYMENT:");
        jPanel9.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 0, 90, 40));

        jTextFieldPartialPayment.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel9.add(jTextFieldPartialPayment, new org.netbeans.lib.awtextra.AbsoluteConstraints(583, 10, 80, -1));

        jPanel8.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel1.add(jPanel8, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setPreferredSize(new java.awt.Dimension(889, 30));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        setSize(new java.awt.Dimension(944, 484));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAdBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdBookingActionPerformed
        JDialogAddBooking addBooking = new JDialogAddBooking(jFrameHrms, true);
        addBooking.setVisible(true);
        addBooking(addBooking.getAddBooking());
        buttonPaymentAble();
        totalPayment();

    }//GEN-LAST:event_jButtonAdBookingActionPerformed

    private void jButtonAdBooking1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdBooking1ActionPerformed
        int selectedRow = jTableBooking.getSelectedRow();
        if (selectedRow != -1) {
            tableModel.removeRow(selectedRow);
        }
    }//GEN-LAST:event_jButtonAdBooking1ActionPerformed

    private void jButtonAdBooking2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdBooking2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAdBooking2ActionPerformed

    private void jButtonAdBooking3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAdBooking3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonAdBooking3ActionPerformed

    private void jButtonPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPaymentActionPerformed
        totalPaymentFullAndPartial();
        setPay(false);
        JDialogPayment payment = new JDialogPayment(jFrameHrms, true, this);
        payment.setVisible(true);
        BillDAOImpl billDAOImpl = new BillDAOImpl();
        Bill bill = new Bill();
        if (getPay() == true) {
            System.out.println("amount:" + getBooking().getAmount());
            //insert bill

            Customer c = new Customer();
            c.setId(getBooking().getBill().getCustomer().getId());
            bill.setCustomer(c);
            billDAOImpl.addBill(bill);
//            //insert booking
            for (int i = 0; i < jTableBooking.getRowCount(); i++) {
                BookingDAOImpl bookDAOImpl = new BookingDAOImpl();
                Booking booking = new Booking();
                RoomRate roomRate = new RoomRate();
                Long roomRateId = Long.parseLong(jTableBooking.getValueAt(i, 0).toString());
                String checkInDate = String.valueOf(jTableBooking.getValueAt(i, 9));
                String checkOutDate = String.valueOf(jTableBooking.getValueAt(i, 10));
                Boolean reserve = Boolean.parseBoolean(jTableBooking.getValueAt(i, 11).toString());
                roomRate.setId(roomRateId);
                bill.setId(billDAOImpl.getMaxId());
                booking.setBill(bill);
                System.out.println("bill id:" + booking.getBill().getId());

                Date cInDate = new StringToDate().convertStringToDate(checkInDate);
                Date cOutDate = new StringToDate().convertStringToDate(checkOutDate);

                booking.setRoomRate(roomRate);
                booking.setCheckInDate(cInDate);
                booking.setCheckInDate(cOutDate);
                booking.setCheckIn(checkInDate);
                booking.setCheckOut(checkOutDate);
                booking.setBill(bill);
                if (reserve == true) {
                    bookDAOImpl.addBookingReserve(booking);
                } else {
                    bookDAOImpl.addBooking(booking);
                }

            }
            //insert payment
            PaymentDAOImpl paymentDAOImpl = new PaymentDAOImpl();
            Payment pay = new Payment();
            User user = new User();
            user.setId(1L);
            bill.setId(billDAOImpl.getMaxId());
            pay.setAmount(getAmountPay());
            pay.setUser(user);
            bill.setId(billDAOImpl.getMaxId());
            pay.setBill(bill);
            paymentDAOImpl.addPayment(pay);
            JOptionPane.showMessageDialog(jFrameHrms, "Booking is successfully recorded!!", "BOOKING PROCESS", JOptionPane.PLAIN_MESSAGE);

        }
    }//GEN-LAST:event_jButtonPaymentActionPerformed

    private void jButtonPayment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPayment1ActionPerformed
        tableModel.setRowCount(0);
    }//GEN-LAST:event_jButtonPayment1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdBooking;
    private javax.swing.JButton jButtonAdBooking1;
    private javax.swing.JButton jButtonAdBooking2;
    private javax.swing.JButton jButtonAdBooking3;
    private javax.swing.JButton jButtonPayment;
    private javax.swing.JButton jButtonPayment1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableBooking;
    private javax.swing.JTextField jTextFieldFullPayment;
    private javax.swing.JTextField jTextFieldPartialPayment;
    // End of variables declaration//GEN-END:variables
    private UserDAOImpl userDAOImpl = new UserDAOImpl();
    private RoomDAOImpl roomDAOImpl = new RoomDAOImpl();

    public DefaultTableModel tableModel = new DefaultTableModel(new Object[]{"ROOM RATE ID", "ROOM", "TYPE", "CAPACITY", "PRICE", "DOWN PAYMENT", "DURATION", "CHECK-IN", "CHECK-OUT", "CHECK-IN UF", "CHECK-OUT UF", "RESERVE", "PRICE UF", "DOWN PAYMENT UF"}, 0) {
        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return String.class;
            }
            switch (columnIndex) {
                case 1:
                    return String.class;
                case 2:
                    return String.class;
                case 3:
                    return String.class;
                case 4:
                    return Integer.class;
                case 5:
                    return Integer.class;
                case 6:
                    return String.class;
                case 7:
                    return String.class;
                case 8:
                    return String.class;
                case 11:
                    return Boolean.class;
                case 12:
                    return String.class;
                case 13:
                    return String.class;
                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int row, int col) {
            if (col < 10) {
                return false;

            } else {
                return true;
            }
        }

    };
    private TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);

    private void setTable() {
        jTableBooking = new JTable(tableModel) {
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                if (isRowSelected(row)) {
                    component.setBackground(getSelectionBackground());
                } else {
                    component.setBackground(row % 2 == 0 ? getBackground() : Color.decode("#F5F5F5")); // Alternate row color
                }
                return component;
            }

            protected JTableHeader createDefaultTableHeader() {
                return new GroupableTableHeader(columnModel);
            }

        };
        JTableHeader header = jTableBooking.getTableHeader();
        header.setPreferredSize(new Dimension(100, 30));
//        header.setFont(new Font("Courier New", Font.PLAIN, 14));
        header.setBackground(new java.awt.Color(70, 130, 180));
//        header.setForeground(new java.awt.Color(51, 51, 51));
//        jTableBooking.setFont(new Font("Courier New", Font.PLAIN, 18));
//        jTableBooking.setRowHeight(30);
        jTableBooking.setRowSorter(sorter);
        jTableBooking.addMouseListener(this);

//        jTableBooking.setDefaultRenderer(Object.class, new JPanelDashboard.CustomTableCellRenderer());
        jTableBooking.setDefaultRenderer(Object.class, new JDialogBooking.CustomTableCellRenderer());
        jScrollPane1.setViewportView(jTableBooking);
        TableColumn hide0 = jTableBooking.getColumnModel().getColumn(0);
        hide0.setMinWidth(0);
        hide0.setMaxWidth(0);
        hide0.setPreferredWidth(0);
//        TableColumn hide9 = jTableBooking.getColumnModel().getColumn(9);
//        hide9.setMinWidth(0);
//        hide9.setMaxWidth(0);
//        hide9.setPreferredWidth(0);
//        TableColumn hide10 = jTableBooking.getColumnModel().getColumn(10);
//        hide10.setMinWidth(0);
//        hide10.setMaxWidth(0);
//        hide10.setPreferredWidth(0);
        TableColumn hide12 = jTableBooking.getColumnModel().getColumn(12);
        hide12.setMinWidth(0);
        hide12.setMaxWidth(0);
        hide12.setPreferredWidth(0);
        TableColumn hide13 = jTableBooking.getColumnModel().getColumn(13);
        hide13.setMinWidth(0);
        hide13.setMaxWidth(0);
        hide13.setPreferredWidth(0);

//"STOCK IN ID", "UNIT", "PRODUCT", "QUANTITY", "PRICE", "LINE TOTAL"
        TableColumn[] column = new TableColumn[100];
        column[1] = jTableBooking.getColumnModel().getColumn(1);
        column[1].setPreferredWidth(30);

        column[2] = jTableBooking.getColumnModel().getColumn(2);
        column[2].setPreferredWidth(30);

        column[3] = jTableBooking.getColumnModel().getColumn(3);
        column[3].setPreferredWidth(30);

        column[4] = jTableBooking.getColumnModel().getColumn(4);
        column[4].setPreferredWidth(50);

        column[5] = jTableBooking.getColumnModel().getColumn(5);
        column[5].setPreferredWidth(80);

        column[6] = jTableBooking.getColumnModel().getColumn(6);
        column[6].setPreferredWidth(80);

        column[7] = jTableBooking.getColumnModel().getColumn(7);
        column[7].setPreferredWidth(130);

        column[8] = jTableBooking.getColumnModel().getColumn(8);
        column[8].setPreferredWidth(130);

        column[11] = jTableBooking.getColumnModel().getColumn(11);
        column[11].setPreferredWidth(30);

    }

    static class CustomTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (value != null && value.equals("VACANT")) {
                cell.setForeground(new Color(0, 100, 0));
            } else if (value != null && value.equals("VACANT")) {
                cell.setForeground(new Color(0, 100, 0));
            } else if (value != null && value.equals("VACANT")) {
                cell.setForeground(new Color(0, 100, 0));
            } else {
                // Set default foreground color for other values
                cell.setForeground(table.getForeground());
            }
            return cell;
        }

    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }
    private RoomRateDAOImpl roomRateDAOImpl = new RoomRateDAOImpl();
    private boolean multipleRoom = false;

    private void addBooking(AddBooking addBooking) {
//"ROOM RATE ID", "ROOM", "TYPE", "CAPACITY", "PRICE", "DOWN PAYMENT", "DURATION", "CHECK-IN", "CHECK-OUT","CHECK-IN UF","CHECK-OUT UF", "RESERVE"
        if (addBooking.getRoomRate() == null) {
            return;
        }
        RoomRate rr = roomRateDAOImpl.selectRoomInfo(addBooking.getRoomRate());

        if (jTableBooking.getRowCount() == 0) {
            tableModel.addRow(new Object[]{addBooking.getRoomRate().getId(), addBooking.getRoom(), rr.getRoom().getRoomType().getType(), rr.getRoom().getRoomType().getCapacity(), df.format(addBooking.getPrice()), df.format(addBooking.getDownPayment()),
                addBooking.getDuration(), new TimestampFormatter(addBooking.getCheckIn()).getFormattedTimestamp(), new TimestampFormatter(addBooking.getCheckOut()).getFormattedTimestamp(), addBooking.getCheckIn(), addBooking.getCheckOut(), addBooking.getReserve(), addBooking.getPrice(), addBooking.getDownPayment()});
            return;
        } else {
            //test for duplicate room
            itemCounter:
            for (int i = 0; i < jTableBooking.getRowCount(); i++) {
                String roomNumberl = jTableBooking.getValueAt(i, 1).toString();
                if (roomNumberl.equals(addBooking.getRoom())) {
                    String room = jTableBooking.getValueAt(i, 1).toString();
                    multipleRoom = true;
                    JOptionPane.showMessageDialog(this, "Room " + room + " is already added.", "WARNING MESSAGE", JOptionPane.WARNING_MESSAGE);
                    break itemCounter;
                } else {
                    multipleRoom = false;
                }
            }
            if (multipleRoom == false) {
                tableModel.addRow(new Object[]{addBooking.getRoomRate().getId(), addBooking.getRoom(), rr.getRoom().getRoomType().getType(), rr.getRoom().getRoomType().getCapacity(), df.format(addBooking.getPrice()), df.format(addBooking.getDownPayment()),
                    addBooking.getDuration(), new TimestampFormatter(addBooking.getCheckIn()).getFormattedTimestamp(), new TimestampFormatter(addBooking.getCheckOut()).getFormattedTimestamp(), addBooking.getCheckIn(), addBooking.getCheckOut(), addBooking.getReserve(), addBooking.getPrice(), addBooking.getDownPayment()});
            }
        }
        multipleRoom = false;
    }

    private void buttonPaymentAble() {
        if (jTableBooking.getRowCount() > 0) {
            jButtonPayment.setEnabled(true);
        } else {
            jButtonPayment.setEnabled(false);
        }
    }

    private void totalPayment() {
        Float sumPrice = 0.0f;
        Float sumDownpayment = 0.0f;
        partialPayment = 0.0f;
        totalPayment = 0.0f;
        fullPayment = 0.0f;
        for (int i = 0; i < jTableBooking.getRowCount(); i++) {
            Float price = Float.parseFloat(jTableBooking.getValueAt(i, 12).toString());
            Float downPayment = Float.parseFloat(jTableBooking.getValueAt(i, 13).toString());
            Boolean isDownPayment = Boolean.parseBoolean(jTableBooking.getValueAt(i, 11).toString());
            sumPrice = sumPrice + price;
            sumDownpayment = sumDownpayment + downPayment;

            if (isDownPayment == true) {
                partialPayment = partialPayment + downPayment;
            } else {
                fullPayment = fullPayment + price;
            }
            totalPayment = totalPayment + price;
        }
        jTextFieldFullPayment.setText(String.valueOf(df.format(totalPayment)));
        jTextFieldPartialPayment.setText(String.valueOf(df.format((partialPayment + fullPayment))));

    }

    private void addPayment() {
        //bill
        CustomerDAOImpl customerDAOImpl = new CustomerDAOImpl();
        User user = new User();
        Customer customer = new Customer();
        user.setId(1L);
        customer.setId(1L);

        for (int i = 0; i < jTableBooking.getRowCount(); i++) {
            Long roomRateId = Long.parseLong(jTableBooking.getValueAt(i, 0).toString());
            String checkInTime = jTableBooking.getValueAt(i, 9).toString();
            String checkOutTime = jTableBooking.getValueAt(i, 10).toString();
            Boolean reserve = Boolean.parseBoolean(jTableBooking.getValueAt(i, 10).toString());

        }
    }

    private static Float full;
    private static Float partial;

    private void totalPaymentFullAndPartial() {
        Float sumPrice = 0.0f;
        Float sumDownpayment = 0.0f;
        partialPayment = 0.0f;
        totalPayment = 0.0f;
        fullPayment = 0.0f;
        for (int i = 0; i < jTableBooking.getRowCount(); i++) {
            Float price = Float.parseFloat(jTableBooking.getValueAt(i, 12).toString());
            Float downPayment = Float.parseFloat(jTableBooking.getValueAt(i, 13).toString());
            Boolean isDownPayment = Boolean.parseBoolean(jTableBooking.getValueAt(i, 11).toString());
            sumPrice = sumPrice + price;
            sumDownpayment = sumDownpayment + downPayment;

            if (isDownPayment == true) {
                partialPayment = partialPayment + downPayment;
            } else {
                fullPayment = fullPayment + price;

            }
            totalPayment = totalPayment + price;
        }
        setFull(totalPayment);
        setPartial(partialPayment + fullPayment);

    }

    /**
     * @return the full
     */
    public static Float getFull() {
        return full;
    }

    /**
     * @param aFull the full to set
     */
    public static void setFull(Float aFull) {
        full = aFull;
    }

    /**
     * @return the partial
     */
    public static Float getPartial() {
        return partial;
    }

    /**
     * @param aPartial the partial to set
     */
    public static void setPartial(Float aPartial) {
        partial = aPartial;
    }

    /**
     * @return the pay
     */
    public static Boolean getPay() {
        return pay;
    }

    /**
     * @param aPay the pay to set
     */
    public static void setPay(Boolean aPay) {
        pay = aPay;
    }

    /**
     * @return the booking
     */
    public static Booking getBooking() {
        return booking;
    }

    /**
     * @param aBooking the booking to set
     */
    public static void setBooking(Booking aBooking) {
        booking = aBooking;
    }

    /**
     * @return the amountPay
     */
    public static Float getAmountPay() {
        return amountPay;
    }

    /**
     * @param aAmountPay the amountPay to set
     */
    public static void setAmountPay(Float aAmountPay) {
        amountPay = aAmountPay;
    }

    public static Date convertStringToDate(String dateString, String pattern) {
        // Create a SimpleDateFormat instance with the given pattern
        SimpleDateFormat dateFormat = new SimpleDateFormat(pattern);

        // Parse the string into a Date object
        try {
            return dateFormat.parse(dateString);
        } catch (ParseException e) {
            System.err.println("ParseException: " + e.getMessage());
            return null;
        }
    }

    private void popUpMenu() {
        JPopupMenu popupMenu = new JPopupMenu();
        JMenuItem deleteItem = new JMenuItem("Remove");
        deleteItem.setIcon(new FlatSVGIcon("svg/search.svg", 16, 16));
        JMenuItem deleteItem1 = new JMenuItem("Reserve");
        deleteItem1.setIcon(new FlatSVGIcon("svg/search.svg", 16, 16));

        popupMenu.add(deleteItem);
        popupMenu.add(deleteItem1);
        jTableBooking.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                int r = jTableBooking.rowAtPoint(e.getPoint());
                if (r >= 0 && r < jTableBooking.getRowCount()) {
                    jTableBooking.setRowSelectionInterval(r, r);
                } else {
                    jTableBooking.clearSelection();
                }

                int rowindex = jTableBooking.getSelectedRow();
                if (rowindex < 0) {
                    return;
                }
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());
                }
            }
        });

        deleteItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = jTableBooking.getSelectedRow();
                if (selectedRow != -1) {
                    tableModel.removeRow(selectedRow);
                }
            }
        });
    }

}
