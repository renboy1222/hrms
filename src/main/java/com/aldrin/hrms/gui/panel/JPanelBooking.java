/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.aldrin.hrms.gui.panel;

import com.aldrin.hrms.dao.impl.BookingDAOImpl;
import com.aldrin.hrms.dao.impl.PaymentDAOImpl;
import com.aldrin.hrms.dao.impl.RoomDAOImpl;
import com.aldrin.hrms.gui.JDialogBooking;
import com.aldrin.hrms.gui.JFrameHRMS;
import com.aldrin.hrms.model.Booking;
import com.aldrin.hrms.model.Payment;
import com.aldrin.hrms.model.Room;
import com.aldrin.hrms.util.ColumnGroup;
import com.aldrin.hrms.util.GroupableTableHeader;
import com.aldrin.hrms.util.StringToDate;
import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.extras.FlatSVGIcon;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Java Programming with Aldrin
 */
public class JPanelBooking extends javax.swing.JPanel implements MouseListener {

    /**
     * Creates new form JPanelContent
     */
    private DecimalFormat df = new DecimalFormat("##,##0.00");
    private JFrameHRMS jFrameHRMS;
    JPopupMenu popupMenu = new JPopupMenu();
    JMenuItem itemCancel = new JMenuItem("Cancel");
    JMenuItem itemBooking = new JMenuItem("Booking");
    JMenuItem itemReserve = new JMenuItem("Reserve");
    JMenuItem itemChangeRoom = new JMenuItem("Change Room");
    JMenuItem itemViewDetails = new JMenuItem("View Details");
    JMenuItem itemCheckIn = new JMenuItem("Check-in");

    public JPanelBooking(JFrameHRMS jFrameHRMS) {
        initComponents();
        this.jFrameHRMS = jFrameHRMS;
        jTextFieldSearch.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Search");
        jTextFieldSearch.putClientProperty(FlatClientProperties.TEXT_FIELD_LEADING_ICON, new FlatSVGIcon("svg/search.svg", 24, 24));
        setTable();
        selectRoom();
        popUpMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jTextFieldSearch = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel4.setPreferredSize(new java.awt.Dimension(940, 40));
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));

        jLabel2.setText("Booking");
        jPanel4.add(jLabel2);

        add(jPanel4, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setPreferredSize(new java.awt.Dimension(1252, 10));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 967, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel7, java.awt.BorderLayout.NORTH);

        jPanel8.setPreferredSize(new java.awt.Dimension(1252, 50));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 1, 5));

        jButton1.setIcon(new FlatSVGIcon("svg/user.svg",32,32));
        jButton1.setText("<html><center><b>Add<br>Booking</center></html>");
        jButton1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton1.setPreferredSize(new java.awt.Dimension(100, 42));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        jPanel8.add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel15.setPreferredSize(new java.awt.Dimension(10, 50));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        jPanel8.add(jPanel15, java.awt.BorderLayout.WEST);

        jPanel5.add(jPanel8, java.awt.BorderLayout.SOUTH);

        jPanel9.setPreferredSize(new java.awt.Dimension(10, 503));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel9, java.awt.BorderLayout.EAST);

        jPanel10.setPreferredSize(new java.awt.Dimension(10, 503));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 317, Short.MAX_VALUE)
        );

        jPanel5.add(jPanel10, java.awt.BorderLayout.WEST);

        jPanel1.add(jPanel5, java.awt.BorderLayout.CENTER);

        jPanel11.setMinimumSize(new java.awt.Dimension(64, 32));
        jPanel11.setPreferredSize(new java.awt.Dimension(1252, 32));
        jPanel11.setLayout(new java.awt.BorderLayout());

        jPanel12.setLayout(new java.awt.BorderLayout());

        jTextFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldSearchKeyReleased(evt);
            }
        });
        jPanel12.add(jTextFieldSearch, java.awt.BorderLayout.CENTER);

        jPanel11.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel13.setPreferredSize(new java.awt.Dimension(10, 34));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        jPanel11.add(jPanel13, java.awt.BorderLayout.WEST);

        jPanel14.setPreferredSize(new java.awt.Dimension(10, 34));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 10, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        jPanel11.add(jPanel14, java.awt.BorderLayout.EAST);

        jPanel1.add(jPanel11, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldSearchKeyReleased
        String text = jTextFieldSearch.getText().trim();
        if (text.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text + ",*"));
        }
    }//GEN-LAST:event_jTextFieldSearchKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JDialogBooking booking = new JDialogBooking(jFrameHRMS, true);
        booking.setVisible(true);
        selectRoom();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables

    //    ""ID", "TYPE ID", "STATUS ID", "ROOM NUMBER", "PRICE", "PRICE UF", "STATUS", "TYPE", "CAPACITY"" 0-8
//    "CHECK-IN","CHECK-OUT","CUSTOMER","PAYMENT" 9-12 BOOK
//    "CHECK-IN","CHECK-OUT","CUSTOMER","DOWN PAYMENT" 13-16 RESERVATION
    public DefaultTableModel tableModel = new DefaultTableModel(new Object[]{"ID", "TYPE ID", "STATUS ID", "ROOM #", "PRICE", "PRICE UF", "STATUS", "TYPE", "CAPACITY",
        "DURATION", "CHECK-IN", "CHECK-OUT", "CHECK-IN UF", "CHECK-OUT UF", "PAID", "DOWN PAYMENT", "INSUFFICIENT", "REFUNDABLE", "BILL ID", "RESERVE"}, 0) {
        public Class getColumnClass(int columnIndex) {
            if (columnIndex == 0) {
                return String.class;
            }
            switch (columnIndex) {
                case 1:
                    return String.class;
                case 2:
                    return String.class;
                case 3:
                    return String.class;
                case 4:
                    return Integer.class;
                case 5:
                    return String.class;
                case 6:
                    return String.class;
                case 7:
                    return String.class;
                case 8:
                    return Integer.class;
                case 14:
                    return Integer.class;
                case 15:
                    return Integer.class;
                case 16:
                    return Integer.class;
                case 17:
                    return Integer.class;
                case 19:
                    return Boolean.class;
                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int row, int col) {
            if (col < 30) {
                return false;

            } else {
                return true;
            }
        }

    };
    private TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(tableModel);

    private void setTable() {
        jTable1 = new JTable(tableModel) {
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                if (isRowSelected(row)) {
//                    component.setBackground(getSelectionBackground());
                } else {
//                    component.setBackground(row % 2 == 0 ? getBackground() : Color.decode("#F5F5F5")); // Alternate row color
//                    component.setBackground(row % 2 == 0 ? getBackground() : new Color(187,178,187)); // Alternate row color
                }

                return component;
            }

            protected JTableHeader createDefaultTableHeader() {
                return new GroupableTableHeader(columnModel);
            }

        };

        TableColumnModel cm = jTable1.getColumnModel();
        ColumnGroup g_lang = new ColumnGroup("ROOM INFORMATION");
        g_lang.add(cm.getColumn(3));
        g_lang.add(cm.getColumn(4));
        g_lang.add(cm.getColumn(5));
        g_lang.add(cm.getColumn(6));
        g_lang.add(cm.getColumn(7));
        g_lang.add(cm.getColumn(8));
        ColumnGroup g_name = new ColumnGroup("BOOKING");
//        g_name.setHeaderRenderer(new CustomHeaderRenderer());
        g_name.add(cm.getColumn(9));
        g_name.add(cm.getColumn(10));
        g_name.add(cm.getColumn(11));
        g_name.add(cm.getColumn(12));
        g_name.add(cm.getColumn(12));
        g_name.add(cm.getColumn(13));
        g_name.add(cm.getColumn(14));
        g_name.add(cm.getColumn(15));
        g_name.add(cm.getColumn(16));
        g_name.add(cm.getColumn(17));
        g_name.add(cm.getColumn(18));
        g_name.add(cm.getColumn(19));

        GroupableTableHeader header = (GroupableTableHeader) jTable1.getTableHeader();
        header.addColumnGroup(g_name);
        header.addColumnGroup(g_lang);
        header.setPreferredSize(new Dimension(header.getPreferredSize().width, 40)); // Optional: Adjust header height
        header.setBackground(new java.awt.Color(70, 130, 180));
        jTable1.setRowSorter(sorter);
        jTable1.addMouseListener(this);

//        jTable1.setDefaultRenderer(Object.class, new JPanelDashboard.CustomTableCellRenderer());
        jScrollPane1.setViewportView(jTable1);
        TableColumn hide0 = jTable1.getColumnModel().getColumn(0);
        hide0.setMinWidth(0);
        hide0.setMaxWidth(0);
        hide0.setPreferredWidth(0);
        TableColumn hide1 = jTable1.getColumnModel().getColumn(1);
        hide1.setMinWidth(0);
        hide1.setMaxWidth(0);
        hide1.setPreferredWidth(0);
        TableColumn hide2 = jTable1.getColumnModel().getColumn(2);
        hide2.setMinWidth(0);
        hide2.setMaxWidth(0);
        hide2.setPreferredWidth(0);
        TableColumn hide5 = jTable1.getColumnModel().getColumn(5);
        hide5.setMinWidth(0);
        hide5.setMaxWidth(0);
        hide5.setPreferredWidth(0);
        TableColumn hide12 = jTable1.getColumnModel().getColumn(12);
        hide12.setMinWidth(0);
        hide12.setMaxWidth(0);
        hide12.setPreferredWidth(0);
        TableColumn hide13 = jTable1.getColumnModel().getColumn(13);
        hide13.setMinWidth(0);
        hide13.setMaxWidth(0);
        hide13.setPreferredWidth(0);
        TableColumn hide6 = jTable1.getColumnModel().getColumn(18);
        hide6.setMinWidth(0);
        hide6.setMaxWidth(0);
        hide6.setPreferredWidth(0);

//"STOCK IN ID", "UNIT", "PRODUCT", "QUANTITY", "PRICE", "LINE TOTAL"
        TableColumn[] column = new TableColumn[100];
        column[1] = jTable1.getColumnModel().getColumn(1);
        column[1].setPreferredWidth(30);

        column[2] = jTable1.getColumnModel().getColumn(2);
        column[2].setPreferredWidth(30);

        column[3] = jTable1.getColumnModel().getColumn(3);
        column[3].setPreferredWidth(30);

        column[4] = jTable1.getColumnModel().getColumn(4);
        column[4].setPreferredWidth(30);

        column[5] = jTable1.getColumnModel().getColumn(5);
        column[5].setPreferredWidth(30);

        column[6] = jTable1.getColumnModel().getColumn(6);
        column[6].setPreferredWidth(40);

        column[7] = jTable1.getColumnModel().getColumn(7);
        column[7].setPreferredWidth(30);

        column[8] = jTable1.getColumnModel().getColumn(8);
        column[8].setPreferredWidth(40);

        column[9] = jTable1.getColumnModel().getColumn(9);
        column[9].setPreferredWidth(40);

        column[10] = jTable1.getColumnModel().getColumn(10);
        column[10].setPreferredWidth(85);

        column[11] = jTable1.getColumnModel().getColumn(11);
        column[11].setPreferredWidth(85);

        column[14] = jTable1.getColumnModel().getColumn(14);
        column[14].setPreferredWidth(30);

        column[16] = jTable1.getColumnModel().getColumn(16);
        column[16].setPreferredWidth(50);

        column[17] = jTable1.getColumnModel().getColumn(17);
        column[17].setPreferredWidth(50);

        column[19] = jTable1.getColumnModel().getColumn(19);
        column[19].setPreferredWidth(30);

    }

    static class CustomTableCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (value != null && value.equals("VACANT")) {
                cell.setForeground(new Color(0, 100, 0));
            } else if (value != null && value.equals("VACANT")) {
                cell.setForeground(new Color(0, 100, 0));
            } else if (value != null && value.equals("VACANT")) {
                cell.setForeground(new Color(0, 100, 0));
            } else {
                // Set default foreground color for other values
                cell.setForeground(table.getForeground());
            }
            return cell;
        }

    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    private RoomDAOImpl roomDAOImpl = new RoomDAOImpl();
    private PaymentDAOImpl paymentDAOImpl = new PaymentDAOImpl();
    private BookingDAOImpl bookingDAOImpl = new BookingDAOImpl();
    private ArrayList<Room> roomList;
    private ArrayList<Booking> bookingList;

    private void selectRoom() {
        tableModel.setRowCount(0);
        roomList = roomDAOImpl.selectRoom();
        tableModel.setRowCount(0);
        Boolean reserve = false;
        for (Room r : roomList) {
//            "DURATION", "CHECK-IN", "CHECK-OUT", "CHECK-IN UF", "PAID", "DOWN PAYMENT", "INSUFFICIENT", "REFUNDABLE","BILL ID"
            Payment p = paymentDAOImpl.selectRoomBookingPayments(r.getId());
            Booking bo = bookingDAOImpl.selectRoomBookingByRoomId(r.getId());
            if (bo.getCheckOut() == null) {
                tableModel.addRow(new Object[]{r.getId(), r.getRoomType().getId(), r.getRoomStatus().getId(), r.getRoomNumber(), df.format(r.getPrice()), r.getPrice(), r.getRoomStatus().getStatus(), r.getRoomType().getType(), r.getRoomType().getCapacity()});
            } else {
                ArrayList<Booking> list = bookingDAOImpl.selectRoomBookingListByRoomId(r.getId());
                int count = 1;
                for (Booking b : list) {
                    if (b.getReserve() != null) {
                        reserve = true;
                    }
                    if (list.size() > 1) {
                        if (b.getReserve() != null) {
                            reserve = true;
                        }
                        if (count == 1) {
                            tableModel.addRow(new Object[]{r.getId(), r.getRoomType().getId(), r.getRoomStatus().getId(), r.getRoomNumber(), df.format(r.getPrice()), r.getPrice(), r.getRoomStatus().getStatus(), r.getRoomType().getType(), r.getRoomType().getCapacity(),
                                b.getRoomRate().getDuration().getDuration(), new StringToDate().convertStringToFormattedDate(b.getCheckIn()), new StringToDate().convertStringToFormattedDate(b.getCheckOut()), b.getCheckIn(), b.getCheckOut(),//2nd line
                                df.format(b.getAmount()), df.format(b.getRoomRate().getDown_payment()), df.format((b.getRoomRate().getPrice() - b.getAmount())), df.format(b.getRoomRate().getRefundable()), b.getBill().getId(), reserve});
                            reserve = false;
                        } else {
                            tableModel.addRow(new Object[]{r.getId(), r.getRoomType().getId(), r.getRoomStatus().getId(), "", "", "", "", "", "",
                                b.getRoomRate().getDuration().getDuration(), new StringToDate().convertStringToFormattedDate(b.getCheckIn()), new StringToDate().convertStringToFormattedDate(b.getCheckOut()), b.getCheckIn(), b.getCheckOut(),//2nd line
                                df.format(b.getAmount()), df.format(b.getRoomRate().getDown_payment()), df.format((b.getRoomRate().getPrice() - b.getAmount())), df.format(b.getRoomRate().getRefundable()), b.getBill().getId(), reserve});
                            reserve = false;
                        }
                        count++;
                    } else {
                        tableModel.addRow(new Object[]{r.getId(), r.getRoomType().getId(), r.getRoomStatus().getId(), r.getRoomNumber(), df.format(r.getPrice()), r.getPrice(), r.getRoomStatus().getStatus(), r.getRoomType().getType(), r.getRoomType().getCapacity(),
                            b.getRoomRate().getDuration().getDuration(), new StringToDate().convertStringToFormattedDate(b.getCheckIn()), new StringToDate().convertStringToFormattedDate(b.getCheckOut()), b.getCheckIn(), b.getCheckOut(),//2nd line
                            df.format(b.getAmount()), df.format(b.getRoomRate().getDown_payment()), df.format((b.getRoomRate().getPrice() - b.getAmount())), df.format(b.getRoomRate().getRefundable()), b.getBill().getId(), reserve});
                        reserve = false;
                    }
                    reserve = false;
                }
            }

        }
    }

    private void popUpMenu() {

        JMenuItem itemRefresh = new JMenuItem("Refresh");
        itemRefresh.setIcon(new FlatSVGIcon("svg/refresh.svg", 16, 16));
        itemCancel.setIcon(new FlatSVGIcon("svg/cancel.svg", 16, 16));
        itemBooking.setIcon(new FlatSVGIcon("svg/book.svg", 16, 16));
        itemReserve.setIcon(new FlatSVGIcon("svg/reserve.svg", 16, 16));
        itemViewDetails.setIcon(new FlatSVGIcon("svg/details.svg", 16, 16));
        itemCheckIn.setIcon(new FlatSVGIcon("svg/check-in.svg", 16, 16));
        itemChangeRoom.setIcon(new FlatSVGIcon("svg/change_room.svg", 16, 16));

        for (int i = 0; i < jTable1.getRowCount(); i++) {
        }
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger() && e.getComponent() instanceof JTable) {
                    int selectedRow = jTable1.getSelectedRow();
                    Boolean reserve = (Boolean) jTable1.getValueAt(selectedRow, 19);
                    popupMenu.removeAll();
                    if (reserve == null) {
                        popupMenu.removeAll();
                        popupMenu.add(itemRefresh);
                        popupMenu.add(itemBooking);
                        popupMenu.add(itemReserve);
                    } else if (reserve.equals(Boolean.TRUE)) {
                        popupMenu.add(itemRefresh);
                        popupMenu.add(itemCancel);
                        popupMenu.add(itemChangeRoom);
                        popupMenu.add(itemViewDetails);
                        popupMenu.add(itemCheckIn);
                    } else if (reserve.equals(Boolean.FALSE)) {
                        popupMenu.add(itemRefresh);
                        popupMenu.add(itemViewDetails);
                    }
                    popupMenu.show(e.getComponent(), e.getX(), e.getY());

                }
            }
        });

        itemRefresh.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                selectRoom();
            }
        });
        itemCancel.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = jTable1.getSelectedRow();
                Boolean reserve = (Boolean) jTable1.getValueAt(selectedRow, 19);
                popupMenu.removeAll();
//                if (reserve == null) {
//                    popupMenu.removeAll();
//                } else
                if (reserve.equals(Boolean.TRUE)) {
                    popupMenu.add(itemRefresh);
                    popupMenu.add(itemCancel);
                } else if (reserve.equals(Boolean.FALSE)) {
                    popupMenu.add(itemRefresh);
                }
            }
        });
        itemBooking.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JDialogBooking booking = new JDialogBooking(jFrameHRMS, true);
                booking.setVisible(true);
                selectRoom();
            }
        });
    }

}
